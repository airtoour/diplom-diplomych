from typing import Any

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from db.models.cars.repository import CarsRepository
from telegram.keyboards.inline.inline import car_info
from telegram.states.update_car_info import UpdateCarInfo

from logger import logger


router = Router(name="fix_info")


@router.message(UpdateCarInfo.confirm_info)
async def confirm_car(message: Message, state: FSMContext, user: Any):
    try:
        await message.delete()

        if message.text == "–í—Å—ë –≤–µ—Ä–Ω–æ":
            await message.answer(
                "–Ø —Ä–∞–¥! üòä\n"
                "–ï—Å–ª–∏ —É –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞—à–∏–Ω–æ–π, "
                "—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–æ–º–∞–Ω–¥—É "
                "–≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É"
            )
        elif message.text == "–ù–µ –≤–µ—Ä–Ω–æ":
            await message.answer(
                text="–û—É, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –í–∞—à–µ–π –º–∞—à–∏–Ω—ã?\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —á–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∏–∂–µ",
                reply_markup=car_info(user.id)
            )
        else:
            if message.text.startswith("/"):
                await message.answer("–û–∫–µ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
    except Exception as e:
        logger.error(f"Confirm Car: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."""
        )
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("info:"))
async def problem_parts(callback: CallbackQuery, state: FSMContext):
    try:
        field = callback.data.split(":")[-1]

        await callback.message.edit_text(
            f"–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòî\n"
            f"–î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —ç—Ç—É —á–∞—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏.\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )
        await state.set_state(UpdateCarInfo.correct_part)
        await state.update_data(problem_field=field)
    except Exception as e:
        logger.error(f"Problem Parts: {e}")
        await callback.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(UpdateCarInfo.correct_part)
async def update_part(message: Message, state: FSMContext, user: Any):
    try:
        problem_field = await state.get_value("problem_field")
        new_value = message.text

        await CarsRepository.update_car(user.id, problem_field, new_value)

        await message.edit_text(
            "–í—Å—ë! –ü–æ–ø—Ä–∞–≤–∏–ª–∏. –ù–∞–¥–µ—é—Å—å, —Ç–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è, —É—Å–ø–µ—Ö–æ–≤!"
        )
    except Exception as e:
        logger.error(f"Update Part: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
