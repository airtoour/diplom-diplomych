from typing import Union, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from db.db_config import async_session_maker
from db.models.cars.repository import CarsRepository

from telegram.states.signup_car import SignupUserCarStates
from telegram.states.update_car_info import UpdateCarInfo
from telegram.keyboards.reply.reply import car_info_confirm
from telegram.keyboards.inline.inline import car_list, lets_solution, retry_register_car

from logger import logger


router = Router(name="Work with User`s Car")


@router.message(Command("car"))
@router.callback_query(F.data.in_(["car", "retry_register_car"]))
async def car(event: Union[Message, CallbackQuery], state: FSMContext, user: Any):
    try:
        messages_ids = []
        await state.clear()

        async with async_session_maker() as session:
            users_car = await CarsRepository.find_one_or_none(session, user_id=user.id)

        lets_register_text = (
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –º–∞—à–∏–Ω—É, "
            "–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—ë <b>–º–∞—Ä–∫—É</b>. <i>–ù–∞–ø—Ä–∏–º–µ—Ä, Lada</i>\n"
            "\n"
            "–ß—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π, —Å–≤–µ—Ä—å—Ç–µ –µ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º "
            "–º–∞—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n"
            "\n"
            "<blockquote>"
            "<i>–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à—É –í–∞—Å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å <b>–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º</b>\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –º–∞—à–∏–Ω—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã</i>"
            "</blockquote>"
        )

        if isinstance(event, Message):
            await event.delete()

            if not users_car:
                await event.answer(lets_register_text, reply_markup=car_list())
                await state.set_state(SignupUserCarStates.brand)
                return

            await event.answer(
                text="–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É –Ω–∞—Å. –≠—Ç–æ –æ–Ω–∞, –≤–µ—Ä–Ω–æ?\n"
                     "\n"
                     "<blockquote>"
                     f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {users_car.brand_name}\n"
                     f"<b>üîª –ú–∞—Ä–∫–∞:</b> {users_car.model_name}\n"
                     f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {users_car.gen_name}\n"
                     f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {users_car.year} –≥–æ–¥–∞\n"
                     f"<b>üîª –ü—Ä–æ–±–µ–≥:</b> {users_car.mileage}"
                     "</blockquote>",
                reply_markup=car_info_confirm()
            )
            await state.set_state(UpdateCarInfo.confirm_info)

        if isinstance(event, CallbackQuery):
            await event.message.delete()

            if not users_car:
                await event.message.edit_text(lets_register_text, reply_markup=car_list())
                await state.set_state(SignupUserCarStates.brand)
                return

            await event.message.edit_text(
                text="–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É –Ω–∞—Å. –≠—Ç–æ –æ–Ω–∞, –≤–µ—Ä–Ω–æ?\n"
                     "\n"
                     "<blockquote>"
                     f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {users_car.brand_name}\n"
                     f"<b>üîª –ú–∞—Ä–∫–∞:</b> {users_car.model_name}\n"
                     f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {users_car.gen_name}\n"
                     f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {users_car.year} –≥–æ–¥–∞\n"
                     f"<b>üîª –ü—Ä–æ–±–µ–≥:</b> {users_car.mileage}"
                     "</blockquote>",
                reply_markup=car_info_confirm()
            )
            await state.set_state(UpdateCarInfo.confirm_info)
    except Exception as e:
        logger.error(f"Car: {e}")
        await event.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.brand)
async def get_model(message: Message, state: FSMContext):
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–¥–µ–ª—å —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã.")
        await state.set_state(SignupUserCarStates.model)
        await state.update_data(car_brand=message.text)
    except Exception as e:
        logger.error(f"Car Brand: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.model)
async def get_year(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å. –î–∞–ª–µ–µ –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–∞—à–∏–Ω—ã. "
            "–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>2012</b>"
        )

        await state.set_state(SignupUserCarStates.year)
        await state.update_data(car_model=message.text)
    except Exception as e:
        logger.error(f"Car Model: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.year)
async def get_gen(message: Message, state: FSMContext):
    try:
        if len(message.text) > 4:
            await message.answer(
                text="‚ùå –ë—ã–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, "
                     "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                reply_markup=retry_register_car
            )
            return

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ <b>–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é</b> –í–∞—à–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá\n"
                 "–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–¥–µ–ª—å –∏ –ª–∏—Ç—Ä–∞–∂ –¥–≤–∏–≥–∞—Ç–µ–ª—è\n"
                 "\n"
                 "<blockquote>"
                 "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                 "<b>–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤–µ—Ä–∏—Ç—å—Å—è</b> —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —è "
                 "–æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ, –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –í–∞—à–µ–π –º–∞—à–∏–Ω–µ"
                 "</blockquote>",
            reply_markup=car_list()
        )
        await state.set_state(SignupUserCarStates.gen)
        await state.update_data(car_year=message.text)
    except Exception as e:
        logger.error(f"Car Year: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.gen)
async def get_mileage(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–µ–≥ –í–∞—à–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –í–∞—Å <i>150.000 –∫–º</i>, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ, —Ç–æ–ª—å–∫–æ <i>150</i>"
        )
        await state.set_state(SignupUserCarStates.mileage)
        await state.update_data(car_gen=message.text)
    except Exception as e:
        logger.error(f"Mileage: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.mileage)
async def register(message: Message, state: FSMContext, user: Any):
    try:
        car_brand = await state.get_value("car_brand")
        car_model = await state.get_value("car_model")
        car_year = int(await state.get_value("car_year"))
        car_gen = await state.get_value("car_gen")
        car_mileage = int(message.text)

        async with async_session_maker() as session:
            new_car = await CarsRepository.add(
                session=session,
                user_id=user.id,
                brand_name=car_brand,
                model_name=car_model,
                gen_name=car_gen,
                year=car_year,
                mileage=car_mileage
            )

        if not new_car:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–¥–Ω–µ–µ"
            )
            return

        await message.answer(
            text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –º–∞—à–∏–Ω–∞:\n"
                 f"\n"
                 f"<blockquote>"
                 f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {car_brand}\n"
                 f"<b>üîª –ú–∞—Ä–∫–∞:</b> {car_model}\n"
                 f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {car_year} –≥–æ–¥–∞\n"
                 f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {car_gen}\n"
                 f"<b>üîª –ü—Ä–æ–±–µ–≥:</b> {car_mileage}"
                 f"</blockquote>\n"
                 "\n"
                 "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, "
                 "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π üôå",
            reply_markup=lets_solution
        )
    except Exception as e:
        logger.error(f"Register: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
