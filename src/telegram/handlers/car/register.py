from typing import Union, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from db.models.cars.repository import CarsRepository

from telegram.bot import bot
from telegram.states.signup_car import SignupUserCarStates
from telegram.states.update_car_info import UpdateCarInfo
from telegram.keyboards.reply.reply import car_info_confirm
from telegram.keyboards.inline.inline import car_list, lets_solution, retry_register_car

from logger import logger


router = Router(name="car")


@router.message(Command("car"))
@router.callback_query(F.data.in_(["car", "retry_register_car"]))
async def car(event: Union[Message, CallbackQuery], state: FSMContext, user: Any):
    try:
        await state.clear()

        if isinstance(event, Message):
            await event.delete()

        if isinstance(event, CallbackQuery):
            await event.message.delete()

        users_car = await CarsRepository.find_one_or_none(user_id=user.id)

        if not users_car:
            await bot.send_message(
                chat_id=event.from_user.id,
                text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –º–∞—à–∏–Ω—É, "
                     "–Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—ë <b>–º–∞—Ä–∫—É</b>\n"
                     "\n"
                     "–ß—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π, —Å–≤–µ—Ä—å—Ç–µ –µ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º "
                     "–º–∞—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n"
                     "\n"
                     "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à—É –í–∞—Å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å <b>–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º</b> –∫–Ω–æ–ø–æ–∫\n"
                     "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –º–∞—à–∏–Ω—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.",
                reply_markup=car_list()
            )
            await state.set_state(SignupUserCarStates.car_brand)
            return

        await bot.send_message(
            chat_id=event.from_user.id,
            text="–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É –Ω–∞—Å. –≠—Ç–æ –æ–Ω–∞, –≤–µ—Ä–Ω–æ?\n"
                 "\n"
                 "<blockquote>"
                 f"<b>üîª –ë—Ä—ç–Ω–¥:</b> {users_car.brand_name}\n"
                 f"<b>üîª –ú–∞—Ä–∫–∞:</b> {users_car.model_name}\n"
                 f"<b>üîª –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {users_car.gen_name}\n"
                 f"<b>üîª –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {users_car.year} –≥–æ–¥–∞"
                 "</blockquote>",
            reply_markup=car_info_confirm()
        )
        await state.set_state(UpdateCarInfo.confirm_info)
    except Exception as e:
        logger.error(f"Car: {e}")
        await event.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.car_brand)
async def car_brand(message: Message, state: FSMContext):
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–¥–µ–ª—å —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã.")
        await state.set_state(SignupUserCarStates.car_model)
        await state.update_data(car_brand=message.text)
    except Exception as e:
        logger.error(f"Car Brand: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.car_model)
async def car_model(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å. –î–∞–ª–µ–µ –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–∞—à–∏–Ω—ã. "
            "–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2012."
        )

        await state.set_state(SignupUserCarStates.car_year)
        await state.update_data(car_model=message.text)
    except Exception as e:
        logger.error(f"Car Model: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.car_year)
async def car_year(message: Message, state: FSMContext):
    try:
        if len(message.text) > 4:
            await message.answer(
                text="‚ùå –ë—ã–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, "
                     "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                reply_markup=retry_register_car
            )
            return

        await message.answer(
            text="–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, —ç—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
                 "\n"
                 "<i>–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
                 "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤–µ—Ä–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —è "
                 "–æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ, –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –í–∞—à–µ–π –º–∞—à–∏–Ω–µ</i>",
            reply_markup=car_list()
        )
        await state.set_state(SignupUserCarStates.car_gen)
        await state.update_data(car_year=message.text)
    except Exception as e:
        logger.error(f"Car Year: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.message(SignupUserCarStates.car_gen)
async def register(message: Message, state: FSMContext, user: Any):
    try:
        brand = await state.get_value("car_brand")
        model = await state.get_value("car_model")
        gen = message.text
        year = await state.get_value("car_year")

        await CarsRepository.add(
            user_id=user.id,
            brand_name=brand,
            model_name=model,
            gen_name=gen,
            year=int(year)
        )

        await message.answer(
            text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n"
                 f"–í–∞—à–∞ –º–∞—à–∏–Ω–∞: <b>{brand} {model} {gen} {year} –≥–æ–¥–∞</b>\n"
                 "\n"
                 "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, "
                 "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–µ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
            reply_markup=lets_solution
        )
    except Exception as e:
        logger.error(f"Register: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
