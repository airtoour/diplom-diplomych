from io import BytesIO
from typing import Union

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from db.db_config import async_session_maker
from db.models.prompts.repository import PromptsRepository

from telegram.keyboards.reply.reply import get_problem_keyboard
from telegram.states.solution import SolutionStates

from ai.openai_api import openai_client

from logger import logger


router = Router(name="Work With User`s Solution")


@router.message(Command("solution"))
@router.callback_query(F.data == "solution")
async def solution(event: Union[Message, CallbackQuery]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    try:
        text = (
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è <b>–ø–æ–Ω—è–ª —Å —á–µ–º –í–∞–º –ø–æ–º–æ—á—å</b>, –≤—ã–±–µ—Ä–∏—Ç–µ "
            "–Ω–∏–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <b>–ø—Ä–æ–±–ª–µ–º–Ω—É—é –æ–±–ª–∞—Å—Ç—å</b> –Ω–∏–∂–µ üëá"
        )

        if isinstance(event, Message):
            await event.delete()
            await event.answer(text=text, reply_markup=get_problem_keyboard)
        else:
            await event.message.delete()
            await event.message.answer(text=text, reply_markup=get_problem_keyboard)
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Solution: {e}")
        await event.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(F.text.in_(["üõû –ó–∞–ø—á–∞—Å—Ç–∏", "üìø –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üõ¢ –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ"]))
async def problem_part(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ç–µ–∫—Å—Ç–æ–≤–æ–µ</b> –∏–ª–∏ "
            "<b>–≥–æ–ª–æ—Å–æ–≤–æ–µ</b> —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å üëá"
        )
        await state.set_state(SolutionStates.solution_type)
        await state.set_data({"type": message.text})
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Problem Part: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(
    SolutionStates.solution_type,
    F.content_type.in_([
        ContentType.AUDIO,
        ContentType.TEXT
    ])
)
async def process_content(message: Message, state: FSMContext):
    file_info = None
    file_data = BytesIO()

    try:
        prompt_type = await state.get_value("type")

        async with async_session_maker() as session:
            prompt = await PromptsRepository.find_one_or_none(
                session, type=prompt_type[2:]
            )

        message_types = {
            "text": message.text,
            "audio": message.audio
        }

        for message_type, content in message_types.items():
            if message_type == "audio":
                if content:
                    file_info = await message.bot.get_file(message.audio.file_id)

                if not file_info:
                    await message.reply("<b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π</b> —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞")
                    return

                try:
                    await message.bot.download_file(file_info.file_path, destination=file_data)
                    file_data.seek(0)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    await message.reply(
                        "<b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</b> –í–∞—à–∏ —Ñ–∞–π–ª—ã, "
                        "<i>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>"
                    )
                    return

                response = await openai_client.audio(prompt.text, file_data)

                if not response:
                    await message.answer(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ!"
                    )
                    return

                await message.answer(str(response), reply_markup=ReplyKeyboardRemove())
            else:
                if content:
                    response = await openai_client.create(prompt.text, content)
                    await message.answer(str(response), reply_markup=ReplyKeyboardRemove())

            break
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Process Content: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
