
from typing import Any, Union

from aiogram import Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext

from ai import yandex
from db.db_config import async_session_maker
from db.models.scores.repository import ScoresRepository
from services.process_ai_requests import RequestAIService

from telegram.keyboards.inline.inline import score_result
from telegram.keyboards.reply.reply import get_problem_keyboard
from telegram.states.solution import SolutionStates

from logger import logger


router = Router(name="Work With User`s Solution")


@router.message(Command("solution"))
@router.callback_query(F.data == "solution")
async def solution(event: Union[Message, CallbackQuery]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    message = None

    try:
        if isinstance(event, Message):
            message = event
        if isinstance(event, CallbackQuery):
            message = event.message

        await message.delete()
        await message.answer(
            text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è <b>–ø–æ–Ω—è–ª —Å —á–µ–º –í–∞–º –ø–æ–º–æ—á—å</b>, –≤—ã–±–µ—Ä–∏—Ç–µ, "
                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø—Ä–æ–±–ª–µ–º–Ω—É—é –æ–±–ª–∞—Å—Ç—å</b> –Ω–∏–∂–µ üëá",
            reply_markup=get_problem_keyboard
        )

    except (Exception, TelegramAPIError) as e:
        logger.error(f"Solution: {e}")
        await event.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(F.text.in_(["üõû –ó–∞–ø—á–∞—Å—Ç–∏", "üìø –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üõ¢ –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ"]))
async def problem_part(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b> "
            "–Ω–∏–∂–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –í–∞–º –ø–æ–º–æ—á—å üëá\n"
            "\n"
            "<blockquote>"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —Å–∏—Ç—É–∞—Ü–∏—é —á—ë—Ç–∫–æ, —ë–º–∫–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ "
            "–Ω–∞—Å—Ç–æ–ª—å–∫–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ</i>"
            "</blockquote>"
        )
        await state.set_state(SolutionStates.solution_type)
        await state.set_data({"type": message.text})
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Problem Part: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )


@router.message(SolutionStates.solution_type)
async def process_content(message: Message, state: FSMContext, user: Any):
    try:
        working = await message.answer("<i>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—é –í–∞—à –∑–∞–ø—Ä–æ—Å...</i>")

        prompt_type = await state.get_value("type")

        ai_service = RequestAIService(
            yandex, message.text, prompt_type[2:], user
        )

        result, request_id = await ai_service.create()

        await message.bot.delete_message(message.chat.id, working.message_id)

        if not result:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>, "
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –µ—â—ë —Ä–∞–∑"
            )
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"{result}\n\n"
            f"<i>–•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è</i> ‚òÄÔ∏è\n\n"
            f"<b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ GearMind</b> üöó"
        )

        await message.answer(
            text="–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç –æ—Ç <b>1</b> –¥–æ <b>5</b> ‚≠êÔ∏è",
            reply_markup=score_result
        )
        await state.update_data(request_id=request_id)
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Process Content: {e}")
        await message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
        await state.clear()


@router.callback_query(F.data.startswith("score:"))
async def process_score_result(callback: CallbackQuery, state: FSMContext, user: Any):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        score = int(callback.data.split(":")[-1])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–ø—Ä–æ—Å–∞, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        request_id = await state.get_value("request_id")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
        async with async_session_maker() as session:
            added_score = await ScoresRepository.add(
                session, request_id=request_id, user_id=user.id, score=score
            )

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É
        if not added_score:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <b>—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏</b> –í–∞—à–µ–π <b>–æ—Ü–µ–Ω–∫–∏</b>, "
                "–ø—Ä–∏–Ω–æ—Å–∏–º, —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è..."
            )
            return

        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
        await callback.message.edit_text(f"<b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</b>: {score} ‚≠êÔ∏è")

        await callback.message.answer(
            text="–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–µ –í–∞–º –∑–∞ —ç—Ç—É –æ—Ü–µ–Ω–∫—É ‚ù§Ô∏è\n"
                 "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å <b>–∫–∞–∫ –º–æ–∂–Ω–æ –ª—É—á—à–µ</b> üòé",
            reply_markup=ReplyKeyboardRemove()
        )
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Process Score: {e}")
        await callback.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
