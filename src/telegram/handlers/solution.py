from typing import Union, Any

from aiogram import Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from telegram.states.signup_car import SignupUserCarStates
from telegram.keyboards.inline.inline import (
    prod_types,
    result_solution,
    first_param
)
from telegram.utils.utils import TABLES_TEXT_MAPPING

from logger import logger


router = Router(name="solution")


@router.message(Command("solution"))
@router.callback_query(F.data == "solution")
async def solution(event: Union[Message, CallbackQuery]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    try:
        text = (
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –í–∞–º –Ω—É–∂–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é, "
            "–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã –Ω–∏–∂–µ üëá"
        )

        if isinstance(event, Message):
            await event.delete()
            await event.answer(text=text, reply_markup=prod_types())
        else:
            await event.message.delete()
            await event.message.answer(text=text, reply_markup=prod_types())
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Solution: {e}")
        await event.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.callback_query(F.data.startswith("table:"))
async def problem_field(callback: CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞—Å–ø–µ–∫—Ç"""
    try:
        aspect_name = callback.data.split(":")[-1]
        text = TABLES_TEXT_MAPPING.get(aspect_name, "")

        await callback.message.answer(text=text, reply_markup=first_param(aspect_name))

        await state.set_state(SignupUserCarStates.set_result)
        await state.update_data(aspect=aspect_name)
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Problem_field: {e}")
        await callback.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )

@router.callback_query(F.data.startswith("value:"))
async def set_result(callback: CallbackQuery, state: FSMContext, user: Any):
    """–•–µ–Ω–¥–ª–µ—Ä, –≤—ã–¥–∞—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã"""
    try:
        data = callback.data.split(":")[-1]
        aspect_name = await state.get_value("aspect")

        await callback.message.answer(
            text="–Ø –ø–æ–∏—Å–∫–∞–ª –¥–ª—è –í–∞—Å –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ <b>–º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏</b> –¥–ª—è –í–∞—Å, "
                 "–º–æ–∂–µ—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –Ω–∏—Ö –ø–æ —Åc—ã–ª–∫–µ –Ω–∏–∂–µ üëá\n"
                 "\n\n"
                 "<blockquote>"
                 "<b>‚ùóÔ∏è –ù–ê–°–¢–û–Ø–¢–ï–õ–¨–ù–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø ‚ùóÔ∏è</b>\n"
                 "\n"
                 "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, "
                 "<b>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏,"
                 "<b><u>–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–º–∏</u></b> –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
                 "</blockquote>",
            reply_markup=await result_solution(aspect_name, data, user)
        )
    except (Exception, TelegramAPIError) as e:
        logger.error(f"Set Result: {e}")
        await callback.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.\n"
            "–°—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞..."
        )
    finally:
        await state.clear()
