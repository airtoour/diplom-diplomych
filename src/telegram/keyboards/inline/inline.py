from enum import StrEnum
from typing import Dict, List

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo
)

from config import settings
from db.models import Cars
from db.models.users.schemas import UsersRoles

# –ú–∞–ø–ø–∏–Ω–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª–µ–π –ê–≤—Ç–æ–º–æ–±–∏–ª—è
CAR_MODULES_MAPPING: Dict[str, str] = {
    "brand_name": "–ú–∞—Ä–∫–∞",
    "model_name": "–ú–æ–¥–µ–ª—å",
    "gen_name": "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è",
    "year": "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
    "mileage": "–ü—Ä–æ–±–µ–≥"
}

class UrlsEnum(StrEnum):
    """–ï–Ω–∞–º —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
    TG = "https://t.me/gearmind_team/"
    IG = "https://www.instagram.com/gearmind_team/"
    ALL_CARS = "https://m3-spb.ru/cars"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
to_signup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úçÔ∏è", callback_data="signup")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ê–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
to_car_register = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É üöó", callback_data="car")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ê–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
retry_register_car = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="retry_register_car")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã GearMind
social_links = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ü©µ", url=UrlsEnum.TG),
        InlineKeyboardButton(text="Instagram* üíú", url=UrlsEnum.IG)
    ]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
car_list = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –º–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–ø–∏—Å–∫–µ üîç", web_app=WebAppInfo(url=UrlsEnum.ALL_CARS))]
])

async def car_info(car: Cars) -> InlineKeyboardMarkup:
    keyboard: List = []

    for field, description in CAR_MODULES_MAPPING.values():
        value = getattr(car, field)

        keyboard.append(
            [InlineKeyboardButton(text=f"{description} ‚Äî {value}", callback_data=f"info:{field}:{value}")]
        )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
lets_solution = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É üëä", callback_data="solution")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
score_result = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="1 ‚≠êÔ∏è", callback_data=f"score:1"),
        InlineKeyboardButton(text="2 ‚≠êÔ∏è", callback_data=f"score:2"),
        InlineKeyboardButton(text="3 ‚≠êÔ∏è", callback_data=f"score:3"),
        InlineKeyboardButton(text="4 ‚≠êÔ∏è", callback_data=f"score:4"),
        InlineKeyboardButton(text="5 ‚≠êÔ∏è", callback_data=f"score:5"),
    ]
])

def profile_keyboard(role: UsersRoles) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è", callback_data="edit_profile")]
    ]

    if role == UsersRoles.ADMIN:
        keyboard.append([InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞ üßô‚Äç‚ôÄÔ∏è", url=f"{settings.GEAR_URL}/admin/{role}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)