import asyncio

from aiogram.exceptions import TelegramAPIError
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from db.models.users.repository import UsersRepository
from telegram.keyboards.inline.inline import to_car_register, first_param

from logger import logger


TABLES_TEXT_MAPPING: dict[str, str] = {
    "–ú–∞—Å–ª–∞":
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∏–¥ –º–∞—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —á–∞—â–µ "
        "–≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è —Å–≤–æ–µ–π –º–∞—à–∏–Ω—ã, "
        "—á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∏–∂–µ",
    "–®–∏–Ω—ã":
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∏–∞–º–µ—Ç—Ä –í–∞—à–∏—Ö —à–∏–Ω, "
        "—á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∏–∂–µ",
    "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã":
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ë–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π, –ø—Ä–∏–µ–º–ª–µ–º –¥–ª—è –í–∞—à–µ–π –º–∞—à–∏–Ω—ã, —á—Ç–æ–±—ã "
        "–ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∏–∂–µ",
    "–î–∏—Å–∫–∏":
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∏–∞–º–µ—Ç—Ä —Ç–≤–æ–∏—Ö –¥–∏—Å–∫–æ–≤, "
        "—á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∏–∂–µ",
}


async def process_user(message: Message, state: FSMContext, phone: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        await state.update_data(phone=phone)

        approved_phone = await message.answer(
            text=f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!",
            reply_markup=ReplyKeyboardRemove()
        )
        await UsersRepository.add(
            tg_user_id=message.from_user.id,
            tg_username=message.from_user.username,
            first_name=message.from_user.first_name,
            phone_number=await state.get_value("phone")
        )
        await asyncio.sleep(1)
        await message.bot.delete_message(
            chat_id=message.from_user.id,
            message_id=approved_phone.message_id
        )
        await message.answer(
            text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                 "\n"
                 "–ò—Ç–∞–∫, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã <b>–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É</b> –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è "
                 "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –º–∞—à–∏–Ω–µ. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá",
            reply_markup=to_car_register
        )
        return True
    except Exception as e:
        logger.error(f"process_user: {e}")
        return False
    finally:
        await state.clear()


async def get_problem_field(callback: CallbackQuery, table: str):
    try:
        text = TABLES_TEXT_MAPPING.get(table, "")

        await callback.message.answer(text=text, reply_markup=first_param(table))

        return True
    except (Exception, TelegramAPIError) as e:
        logger.error(e)
        return False
